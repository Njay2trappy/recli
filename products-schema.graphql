directive @example on FIELD_DEFINITION

directive @key(fields: _FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @external(reason: String) on OBJECT | FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @extends on OBJECT | INTERFACE

type Payment {
  id: ID!
  userId: String!
  walletAddress: String!
  privateKey: String!
  amount: Float!
  status: String!
  createdAt: String!
  blockchain: String!
  convertedAmount: Float!
}

type Query {
  getPayment(id: ID!): Payment
  getPaymentsByUser(userId: String!): [Payment]
  login(email: String!, password: String!): AuthPayload!
  adminLogin(email: String!, password: String!): AdminAuthPayload!
  getAllUsers(adminToken: String!): [User!]!
  getDeletedUsers(adminToken: String!): [User!]!
  getDeposits(userId: ID!): [Deposit!]!
  getWalletAddresses(userId: ID!, blockchain: String!): WalletAddresses!
  getUsers: [User!]!
  getUserById(userId: ID!): User!
  _service: _Service!
}

type Mutation {
  generatePaymentAddress(userId: String!, amount: Float!, blockchain: String!): Payment
  createUser(firstName: String!, lastName: String!, email: String!, password: String!, gender: String, username: String!): User!
  createAdmin(firstName: String!, lastName: String!, email: String!, password: String!, username: String!): Admin!
  deleteUser(adminToken: String!, userId: ID!): String!
  createDeposit(userId: ID!, amount: Float!): Deposit!
  createCustodian(username: String!, token: String!): Custodian!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  gender: String
  username: String!
  createdAt: String!
  updatedAt: String!
}

type Admin {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  createdAt: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type AdminAuthPayload {
  adminToken: String!
  admin: Admin!
}

type Deposit {
  id: ID!
  userId: ID!
  amount: Float!
  createdAt: String!
}

type WalletAddresses {
  bsc: String
  solana: String
}

type Custodian {
  userId: ID!
  username: String!
  bsc: String!
  solana: String!
}

scalar _FieldSet

scalar _Any

type _Service {
  sdl: String
}